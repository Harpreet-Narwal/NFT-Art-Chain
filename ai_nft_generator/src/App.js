/* eslint-disable no-undef */
import { useState, useEffect } from 'react';
import { NFTStorage, File } from 'nft.storage'
import { Buffer } from 'buffer';
import { ethers } from 'ethers';
import axios from 'axios';

// Components
import Spinner from 'react-bootstrap/Spinner';
import Navigation from './components/Navigation';

// ABIs
import NFT from './abis/NFT.json'

// Config
import config from './config.json';

function App() {
  const [provider, setProvider] = useState(null)
  const [account, setAccount] = useState(null)

  const[name, setName] = useState("")
  const[description, setDescription] = useState("")
  const[image, setImage] = useState(null)

  const loadBlockchainData = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    setProvider(provider)
  }

  const submitHandler = async (e) => {
    e.preventDefault()           //stops refreshing the page when Generate button is clicked

    const imageData = createImage() //Calling an AI API to generate the image from the user description

  }

  const createImage = async (e) => {
    console.log("Generating Image...")

    //The model API
    const URL = 'https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2'

      const response = await axios({
        url: URL,
        method: 'POST',
        headers: {
          Authorization : 'Bearer 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',   
          Accept: 'application/json' ,
          'Content-Type': 'application/json'
        },
        data: JSON.stringify({
          inputs: description, options: { wait_for_model: true },
        }),
        responseType: 'arraybuffer',
      })             //this is the function to make the API call
  
    const type = response.headers['content-type']
    const data = response.data

    const base64data = Buffer.from(data).toString('base64')
    const img = `data:${type};base64,` + base64data   //  <--- This is to render on our front end react Page
    setImage(img)

    return data
  }

  useEffect(() => {
    loadBlockchainData()
  }, [])

  return (
    <div>
      <Navigation account={account} setAccount={setAccount} />     
      
      <div className = "form">
        <form onSubmit={submitHandler}>
          
          <input type="text" placeholder="Name the image..." onChange={(e) => { setName(e.target.value) }}></input>
          <input type="text" placeholder="Describe the image..." onChange={(e) => { setDescription(e.target.value) }}></input>
          <input type="submit" value="Generate"></input>
        </form>
    
        <div className="image">
          <img src={image} alt="Image generated by AI" />
        </div>
      </div>

        <p>View&nbsp;<a href="" target="_blank" rel="noreferrer">Metadata</a></p>
    </div>
  );
}

export default App;
